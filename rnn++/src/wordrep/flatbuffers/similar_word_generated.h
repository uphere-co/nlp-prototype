// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SIMILARWORD_WORDREP_IO_H_
#define FLATBUFFERS_GENERATED_SIMILARWORD_WORDREP_IO_H_

#include "flatbuffers/flatbuffers.h"

namespace wordrep {
namespace io {

struct SimilarWordPair;

struct SimilarWords;

MANUALLY_ALIGNED_STRUCT(8) SimilarWordPair FLATBUFFERS_FINAL_CLASS {
 private:
  int64_t word_;
  int64_t sim_;
  float similarity_;
  int32_t padding0__;

 public:
  SimilarWordPair() {
    memset(this, 0, sizeof(SimilarWordPair));
  }
  SimilarWordPair(const SimilarWordPair &_o) {
    memcpy(this, &_o, sizeof(SimilarWordPair));
  }
  SimilarWordPair(int64_t _word, int64_t _sim, float _similarity)
      : word_(flatbuffers::EndianScalar(_word)),
        sim_(flatbuffers::EndianScalar(_sim)),
        similarity_(flatbuffers::EndianScalar(_similarity)),
        padding0__(0) {
    (void)padding0__;
  }
  int64_t word() const {
    return flatbuffers::EndianScalar(word_);
  }
  int64_t sim() const {
    return flatbuffers::EndianScalar(sim_);
  }
  float similarity() const {
    return flatbuffers::EndianScalar(similarity_);
  }
};
STRUCT_END(SimilarWordPair, 24);

struct SimilarWords FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_PAIRS = 4
  };
  const flatbuffers::Vector<const SimilarWordPair *> *pairs() const {
    return GetPointer<const flatbuffers::Vector<const SimilarWordPair *> *>(VT_PAIRS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_PAIRS) &&
           verifier.Verify(pairs()) &&
           verifier.EndTable();
  }
};

struct SimilarWordsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pairs(flatbuffers::Offset<flatbuffers::Vector<const SimilarWordPair *>> pairs) {
    fbb_.AddOffset(SimilarWords::VT_PAIRS, pairs);
  }
  SimilarWordsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SimilarWordsBuilder &operator=(const SimilarWordsBuilder &);
  flatbuffers::Offset<SimilarWords> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<SimilarWords>(end);
    return o;
  }
};

inline flatbuffers::Offset<SimilarWords> CreateSimilarWords(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<const SimilarWordPair *>> pairs = 0) {
  SimilarWordsBuilder builder_(_fbb);
  builder_.add_pairs(pairs);
  return builder_.Finish();
}

inline flatbuffers::Offset<SimilarWords> CreateSimilarWordsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<const SimilarWordPair *> *pairs = nullptr) {
  return wordrep::io::CreateSimilarWords(
      _fbb,
      pairs ? _fbb.CreateVector<const SimilarWordPair *>(*pairs) : 0);
}

inline const wordrep::io::SimilarWords *GetSimilarWords(const void *buf) {
  return flatbuffers::GetRoot<wordrep::io::SimilarWords>(buf);
}

inline const char *SimilarWordsIdentifier() {
  return "wfsw";
}

inline bool SimilarWordsBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, SimilarWordsIdentifier());
}

inline bool VerifySimilarWordsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<wordrep::io::SimilarWords>(SimilarWordsIdentifier());
}

inline const char *SimilarWordsExtension() {
  return "wfsw";
}

inline void FinishSimilarWordsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<wordrep::io::SimilarWords> root) {
  fbb.Finish(root, SimilarWordsIdentifier());
}

}  // namespace io
}  // namespace wordrep

#endif  // FLATBUFFERS_GENERATED_SIMILARWORD_WORDREP_IO_H_
