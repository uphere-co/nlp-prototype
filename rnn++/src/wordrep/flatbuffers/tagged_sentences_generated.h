// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TAGGEDSENTENCES_WORDREP_WIKI_IO_H_
#define FLATBUFFERS_GENERATED_TAGGEDSENTENCES_WORDREP_WIKI_IO_H_

#include "flatbuffers/flatbuffers.h"

namespace wordrep {
namespace wiki {
namespace io {

struct EntityCandidate;

struct TaggedEntity;

struct TaggedSentences;

MANUALLY_ALIGNED_STRUCT(8) EntityCandidate FLATBUFFERS_FINAL_CLASS {
 private:
  int64_t idx_;
  int64_t uid_;
  double score_;

 public:
  EntityCandidate() {
    memset(this, 0, sizeof(EntityCandidate));
  }
  EntityCandidate(const EntityCandidate &_o) {
    memcpy(this, &_o, sizeof(EntityCandidate));
  }
  EntityCandidate(int64_t _idx, int64_t _uid, double _score)
      : idx_(flatbuffers::EndianScalar(_idx)),
        uid_(flatbuffers::EndianScalar(_uid)),
        score_(flatbuffers::EndianScalar(_score)) {
  }
  int64_t idx() const {
    return flatbuffers::EndianScalar(idx_);
  }
  int64_t uid() const {
    return flatbuffers::EndianScalar(uid_);
  }
  double score() const {
    return flatbuffers::EndianScalar(score_);
  }
};
STRUCT_END(EntityCandidate, 24);

MANUALLY_ALIGNED_STRUCT(8) TaggedEntity FLATBUFFERS_FINAL_CLASS {
 private:
  int64_t idx_;
  uint64_t len_;

 public:
  TaggedEntity() {
    memset(this, 0, sizeof(TaggedEntity));
  }
  TaggedEntity(const TaggedEntity &_o) {
    memcpy(this, &_o, sizeof(TaggedEntity));
  }
  TaggedEntity(int64_t _idx, uint64_t _len)
      : idx_(flatbuffers::EndianScalar(_idx)),
        len_(flatbuffers::EndianScalar(_len)) {
  }
  int64_t idx() const {
    return flatbuffers::EndianScalar(idx_);
  }
  uint64_t len() const {
    return flatbuffers::EndianScalar(len_);
  }
};
STRUCT_END(TaggedEntity, 16);

struct TaggedSentences FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CANDIDATES = 4,
    VT_TAGGED_ENTITIES = 6
  };
  const flatbuffers::Vector<const EntityCandidate *> *candidates() const {
    return GetPointer<const flatbuffers::Vector<const EntityCandidate *> *>(VT_CANDIDATES);
  }
  const flatbuffers::Vector<const TaggedEntity *> *tagged_entities() const {
    return GetPointer<const flatbuffers::Vector<const TaggedEntity *> *>(VT_TAGGED_ENTITIES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_CANDIDATES) &&
           verifier.Verify(candidates()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_TAGGED_ENTITIES) &&
           verifier.Verify(tagged_entities()) &&
           verifier.EndTable();
  }
};

struct TaggedSentencesBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_candidates(flatbuffers::Offset<flatbuffers::Vector<const EntityCandidate *>> candidates) {
    fbb_.AddOffset(TaggedSentences::VT_CANDIDATES, candidates);
  }
  void add_tagged_entities(flatbuffers::Offset<flatbuffers::Vector<const TaggedEntity *>> tagged_entities) {
    fbb_.AddOffset(TaggedSentences::VT_TAGGED_ENTITIES, tagged_entities);
  }
  TaggedSentencesBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TaggedSentencesBuilder &operator=(const TaggedSentencesBuilder &);
  flatbuffers::Offset<TaggedSentences> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<TaggedSentences>(end);
    return o;
  }
};

inline flatbuffers::Offset<TaggedSentences> CreateTaggedSentences(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<const EntityCandidate *>> candidates = 0,
    flatbuffers::Offset<flatbuffers::Vector<const TaggedEntity *>> tagged_entities = 0) {
  TaggedSentencesBuilder builder_(_fbb);
  builder_.add_tagged_entities(tagged_entities);
  builder_.add_candidates(candidates);
  return builder_.Finish();
}

inline flatbuffers::Offset<TaggedSentences> CreateTaggedSentencesDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<const EntityCandidate *> *candidates = nullptr,
    const std::vector<const TaggedEntity *> *tagged_entities = nullptr) {
  return wordrep::wiki::io::CreateTaggedSentences(
      _fbb,
      candidates ? _fbb.CreateVector<const EntityCandidate *>(*candidates) : 0,
      tagged_entities ? _fbb.CreateVector<const TaggedEntity *>(*tagged_entities) : 0);
}

inline const wordrep::wiki::io::TaggedSentences *GetTaggedSentences(const void *buf) {
  return flatbuffers::GetRoot<wordrep::wiki::io::TaggedSentences>(buf);
}

inline const char *TaggedSentencesIdentifier() {
  return "wfts";
}

inline bool TaggedSentencesBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, TaggedSentencesIdentifier());
}

inline bool VerifyTaggedSentencesBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<wordrep::wiki::io::TaggedSentences>(TaggedSentencesIdentifier());
}

inline const char *TaggedSentencesExtension() {
  return "wfts";
}

inline void FinishTaggedSentencesBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<wordrep::wiki::io::TaggedSentences> root) {
  fbb.Finish(root, TaggedSentencesIdentifier());
}

}  // namespace io
}  // namespace wiki
}  // namespace wordrep

#endif  // FLATBUFFERS_GENERATED_TAGGEDSENTENCES_WORDREP_WIKI_IO_H_
