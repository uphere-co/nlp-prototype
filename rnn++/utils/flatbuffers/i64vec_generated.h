// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_I64VEC_UTIL_IO_H_
#define FLATBUFFERS_GENERATED_I64VEC_UTIL_IO_H_

#include "flatbuffers/flatbuffers.h"

namespace util {
namespace io {

struct I64Vector;

struct I64Vector FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALS = 4
  };
  const flatbuffers::Vector<int64_t> *vals() const {
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_VALS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_VALS) &&
           verifier.Verify(vals()) &&
           verifier.EndTable();
  }
};

struct I64VectorBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_vals(flatbuffers::Offset<flatbuffers::Vector<int64_t>> vals) {
    fbb_.AddOffset(I64Vector::VT_VALS, vals);
  }
  I64VectorBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  I64VectorBuilder &operator=(const I64VectorBuilder &);
  flatbuffers::Offset<I64Vector> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<I64Vector>(end);
    return o;
  }
};

inline flatbuffers::Offset<I64Vector> CreateI64Vector(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<int64_t>> vals = 0) {
  I64VectorBuilder builder_(_fbb);
  builder_.add_vals(vals);
  return builder_.Finish();
}

inline flatbuffers::Offset<I64Vector> CreateI64VectorDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int64_t> *vals = nullptr) {
  return util::io::CreateI64Vector(
      _fbb,
      vals ? _fbb.CreateVector<int64_t>(*vals) : 0);
}

inline const util::io::I64Vector *GetI64Vector(const void *buf) {
  return flatbuffers::GetRoot<util::io::I64Vector>(buf);
}

inline const char *I64VectorIdentifier() {
  return "I64V";
}

inline bool I64VectorBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, I64VectorIdentifier());
}

inline bool VerifyI64VectorBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<util::io::I64Vector>(I64VectorIdentifier());
}

inline const char *I64VectorExtension() {
  return "i64v";
}

inline void FinishI64VectorBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<util::io::I64Vector> root) {
  fbb.Finish(root, I64VectorIdentifier());
}

}  // namespace io
}  // namespace util

#endif  // FLATBUFFERS_GENERATED_I64VEC_UTIL_IO_H_
