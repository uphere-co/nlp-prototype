// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_F32VEC_UTIL_IO_FB_H_
#define FLATBUFFERS_GENERATED_F32VEC_UTIL_IO_FB_H_

#include "flatbuffers/flatbuffers.h"

namespace util {
namespace io {
namespace fb {

struct F32Vector;

struct F32Vector FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALS = 4
  };
  const flatbuffers::Vector<float> *vals() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_VALS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_VALS) &&
           verifier.Verify(vals()) &&
           verifier.EndTable();
  }
};

struct F32VectorBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_vals(flatbuffers::Offset<flatbuffers::Vector<float>> vals) {
    fbb_.AddOffset(F32Vector::VT_VALS, vals);
  }
  F32VectorBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  F32VectorBuilder &operator=(const F32VectorBuilder &);
  flatbuffers::Offset<F32Vector> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<F32Vector>(end);
    return o;
  }
};

inline flatbuffers::Offset<F32Vector> CreateF32Vector(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<float>> vals = 0) {
  F32VectorBuilder builder_(_fbb);
  builder_.add_vals(vals);
  return builder_.Finish();
}

inline flatbuffers::Offset<F32Vector> CreateF32VectorDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<float> *vals = nullptr) {
  return util::io::fb::CreateF32Vector(
      _fbb,
      vals ? _fbb.CreateVector<float>(*vals) : 0);
}

inline const util::io::fb::F32Vector *GetF32Vector(const void *buf) {
  return flatbuffers::GetRoot<util::io::fb::F32Vector>(buf);
}

inline const char *F32VectorIdentifier() {
  return "F32V";
}

inline bool F32VectorBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, F32VectorIdentifier());
}

inline bool VerifyF32VectorBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<util::io::fb::F32Vector>(F32VectorIdentifier());
}

inline const char *F32VectorExtension() {
  return "f32v";
}

inline void FinishF32VectorBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<util::io::fb::F32Vector> root) {
  fbb.Finish(root, F32VectorIdentifier());
}

}  // namespace fb
}  // namespace io
}  // namespace util

#endif  // FLATBUFFERS_GENERATED_F32VEC_UTIL_IO_FB_H_
