// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PAIRS_UTIL_IO_FB_H_
#define FLATBUFFERS_GENERATED_PAIRS_UTIL_IO_FB_H_

#include "flatbuffers/flatbuffers.h"

namespace util {
namespace io {
namespace fb {

struct Pair;

struct Pairs;

MANUALLY_ALIGNED_STRUCT(8) Pair FLATBUFFERS_FINAL_CLASS {
 private:
  int64_t key_;
  int64_t value_;

 public:
  Pair() {
    memset(this, 0, sizeof(Pair));
  }
  Pair(const Pair &_o) {
    memcpy(this, &_o, sizeof(Pair));
  }
  Pair(int64_t _key, int64_t _value)
      : key_(flatbuffers::EndianScalar(_key)),
        value_(flatbuffers::EndianScalar(_value)) {
  }
  int64_t key() const {
    return flatbuffers::EndianScalar(key_);
  }
  int64_t value() const {
    return flatbuffers::EndianScalar(value_);
  }
};
STRUCT_END(Pair, 16);

struct Pairs FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VALS = 4
  };
  const flatbuffers::Vector<const Pair *> *vals() const {
    return GetPointer<const flatbuffers::Vector<const Pair *> *>(VT_VALS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_VALS) &&
           verifier.Verify(vals()) &&
           verifier.EndTable();
  }
};

struct PairsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_vals(flatbuffers::Offset<flatbuffers::Vector<const Pair *>> vals) {
    fbb_.AddOffset(Pairs::VT_VALS, vals);
  }
  PairsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PairsBuilder &operator=(const PairsBuilder &);
  flatbuffers::Offset<Pairs> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<Pairs>(end);
    return o;
  }
};

inline flatbuffers::Offset<Pairs> CreatePairs(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<const Pair *>> vals = 0) {
  PairsBuilder builder_(_fbb);
  builder_.add_vals(vals);
  return builder_.Finish();
}

inline flatbuffers::Offset<Pairs> CreatePairsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<const Pair *> *vals = nullptr) {
  return util::io::fb::CreatePairs(
      _fbb,
      vals ? _fbb.CreateVector<const Pair *>(*vals) : 0);
}

inline const util::io::fb::Pairs *GetPairs(const void *buf) {
  return flatbuffers::GetRoot<util::io::fb::Pairs>(buf);
}

inline const char *PairsIdentifier() {
  return "uifp";
}

inline bool PairsBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, PairsIdentifier());
}

inline bool VerifyPairsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<util::io::fb::Pairs>(PairsIdentifier());
}

inline const char *PairsExtension() {
  return "uifp";
}

inline void FinishPairsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<util::io::fb::Pairs> root) {
  fbb.Finish(root, PairsIdentifier());
}

}  // namespace fb
}  // namespace io
}  // namespace util

#endif  // FLATBUFFERS_GENERATED_PAIRS_UTIL_IO_FB_H_
